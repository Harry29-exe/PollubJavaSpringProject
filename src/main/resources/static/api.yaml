openapi: 3.0.2
servers:
  - url: /v3
info:
  version: 1.0.17
  title: Swagger Petstore - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'

paths:
  /products/{productId}:
    get:
      operationId: getProduct
      description: get product
      summary:  get product
      parameters:
        - name: productId
          description: product id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      operationId: deleteProduct
      description: deleteProduct
      summary: deleteProduct
      parameters:
        - name: productId
          description: product id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: ok
  /products:
    post:
      operationId: createProduct
      description: createProduct
      summary: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      operationId: updateProduct
      description: updateProduct
      summary:  updateProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    get:
      operationId: getProducts
      description: get products
      summary: get products
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /orders:
    post:
      operationId: createOrder
      description: create order
      summary: create order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    get:
      operationId: getOrders
      description: get orders
      summary: get orders
      parameters:
        - in: query
          name: pageIndex
          schema:
            type: integer
            format: int64
            default: 0
          required: false
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int64
            default: 50
            minimum: 1
            maximum: 1000
          required: false
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /orders/{orderId}:
    delete:
      operationId: deleteOrder
      description: delete order
      summary: delete order
      parameters:
        - name: orderId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: ok
  /login:
    post:
      operationId: login
      description: login
      summary: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCmd'
      responses:
        200:
          description: ok
  /user:
    post:
      operationId: createUser
      description: create user
      summary: create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserCmd'
      responses:
        200:
          description: ok
components:
  schemas:
    CreateUserCmd:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 255
          example: bob
        password:
          type: string
          minLength: 10
          maxLength: 255
          example: StrongPassword123
        role:
          $ref: '#/components/schemas/UserRole'
      required:
        - username
        - password
        - role
    LoginCmd:
      type: object
      properties:
        username:
          type: string
          maxLength: 100
        password:
          type: string
          minLength: 100
    UserRole:
      type: string
      enum:
        - ADMIN
        - CUSTOMER
      example: CUSTOMER
    NewOrder:
      type: object
      properties:

        orderPositions:
          type: array
          items:
            $ref: '#/components/schemas/OrderPosition'
          minItems: 1
          maxItems: 1000
      required:
        - customerId
        - orderPositions
    Order:
      allOf:
        - $ref: '#/components/schemas/NewOrder'
        - type: object
          properties:
            customerId:
              example: 2
              type: integer
              format: int64
            id:
              type: integer
              format: int64
              minimum: 1
            creationDate:
              type: string
              format: date-time
          required:
            - id
            - creationDate
    OrderPosition:
      type: object
      properties:
        productId:
          example: 1
          type: integer
          format: int64
        amount:
          example: 2
          type: integer
          format: int32
      required:
        - productId
        - amount
    Product:
      type:
        object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 255
        price:
          type: number
          format: float64
        description:
          type: string
          maxLength: 30000
      required:
        - id
        - name
        - price
        - description